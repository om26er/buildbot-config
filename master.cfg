# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

config = BuildmasterConfig = {}

####### WORKERS

config['workers'] = [worker.Worker("crossbario", 'supersecret')]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
config['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

config['change_source'] = []
config['change_source'].append(changes.GitPoller('git://github.com/om26er/crossbar.git', only_tags=True, pollInterval=10))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

config['schedulers'] = []
config['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="changes",
                            change_filter=util.ChangeFilter(branch_re='refs/tags/*'),
                            treeStableTimer=None,
                            builderNames=["crossbar-release"]))
config['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["crossbar-release"]))

####### BUILDERS

factory = util.BuildFactory()
factory.addStep(steps.Git(repourl='http://github.com/om26er/crossbar.git', mode='full', method='clobber'))
factory.addStep(steps.ShellCommand(command=["uname", "-a"]))

config['builders'] = []
config['builders'].append(util.BuilderConfig(name="crossbar-release", workernames=["crossbario"], factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

config['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

config['title'] = "Buildbot config"
config['titleURL'] = "https://github.com/om26er/buildbot-config"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

config['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
config['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

config['db'] = {'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ)}
