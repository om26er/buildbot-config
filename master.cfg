# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *
from buildbot.www.hooks.github import GitHubEventHandler


#class MyGitHubHandler(GitHubEventHandler):
#    def handle_create(self, payload, event):
#       if payload['ref_type'] == 'tag':
#            return self.handle_push(payload, event)
#        return [], 'git'


c = BuildmasterConfig = {}

####### WORKERS

c['workers'] = [worker.Worker("crossbario", 'supersecret')]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/om26er/buildbot-config.git',
        workdir='gitpoller-workdir', only_tags=True,
        pollInterval=10))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(repository="github.com/om26er/buildbot-config"),
                            treeStableTimer=None,
                            builderNames=["sample"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["sample"]))

####### BUILDERS

factory = util.BuildFactory()
factory.addStep(steps.Git(repourl='http://github.com/om26er/buildbot-config.git', mode='incremental'))
factory.addStep(steps.ShellCommand(command=["ls", "-la"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="sample",
      workernames=["crossbario"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Buildbot config"
c['titleURL'] = "https://github.com/om26er/buildbot-config"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

#c['www'].update({'change_hook_dialects': {'github': {'class': MyGitHubHandler}}})

####### DB URL

c['db'] = {'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ)}
